import React from "react";
import { Accordion } from "react-bootstrap";

const Blogs = () => {
  return (
    <div>
      <Accordion
        className="w-75 mx-auto pt-4 mt-4 pb-4 mb-4"
        defaultActiveKey={["0"]}
        alwaysOpen
      >
        <Accordion.Item eventKey="0">
          <Accordion.Header>
            Difference Between Javascript and Node.js
          </Accordion.Header>
          <Accordion.Body>
            At the very root concept javascript is a programming language on the other hand node.js is a runtime environment.<br />
            We can't run JavaScript outside the browser. But with the help of node.js we can run javascript outside the browser <br />
            JavaScript basically used in clint side for the interection purposes, on the other hand node js is used in backend for managing the database and server side.<br />
            Javascript can run in any browser engine as like JS core in safari and Spidermonkey in Firefox. <br />
            V8 is the Javascript engine inside of node.js that parses and runs Javascript. 
          </Accordion.Body>
        </Accordion.Item>

        <Accordion.Item eventKey="1">
          <Accordion.Header>
            Why should we use node.js and when should we use mongodb?
          </Accordion.Header>
          <Accordion.Body>
            <strong>Why should we use node.js?</strong>
            Node.js allows reducing the entire server-side application startup from 40 minutes to just 1 minute <br></br>It is a JavaScript runtime built on Chrome’s V8 JS engine. It uses an event-driven, asynchronous non-blocking input/output model and operates on a single thread event loop.
            <br /><br />As it has event loop API and WebSockets it is possible to build real-time web applications like chat, video conference room or collaboration tools helping coworkers to work on the same document at the same time <br /><br />
            <strong>when should we use mongodb?</strong> It is quite impossible to declare a database suitable for evry operation. It depends on use case. Based on some use case we can identify some ocetion when we cna use mongodb as database.
            <ul>
              <li>Document oriented</li>
              <li>High performance</li>
              <li>High availability — Replication</li>
              <li>High scalability – Sharding</li>
              <li>Dynamic — No rigid schema.</li>
              <li>Flexible – field addition/deletion have less or no impact on the application</li>
              <li>Heterogeneous Data</li>
              <li>No Joins</li>
              <li>Distributed</li>
              <li>Data Representation in JSON or BSON</li>
              <li>Geospatial support</li>
              <li>Easy Integration with BigData Hadoop</li>
              <li>Document-based query language that’s nearly as powerful as SQL</li>
              <li>Cloud distributions such as AWS, Microsoft, RedHat,dotCloud and SoftLayer etc:-. In fact, MongoDB is built for the cloud. Its native scale-out architecture, enabled by ‘sharding,’ aligns well with the horizontal scaling and agility afforded by cloud computing.</li>
            </ul>
          </Accordion.Body>
        </Accordion.Item>

        <Accordion.Item eventKey="2">
          <Accordion.Header>
            Difference between SQL and NoSQL database{" "}
          </Accordion.Header>
          <Accordion.Body>
            <strong>SQL database:</strong> 
            <ul>
              <li>In this type of database we use sql queires and syntax to work with the data in database.</li>
              <li>This database is in tabular format.</li>
              <li>They are scalable vertically</li>
              <li><small>Examples</small> are Sqlite, MySql, Oracle, Postgres and MS-SQL</li>
            </ul>
            <br></br>
            <br></br>
            <strong>NoSQL database:</strong>
            <ul>
              <li>NoSQL is non relational database management system. That means there is no relation between the fields in database.</li>
              <li>To operate with the data we have different type of technology.</li>
              <li>NoSQL databases are document based with key-value pairs and graph databases.</li>
              <li><small>Examples</small> are Cassandra, MongoDB, BigTable, Redis, RavenDb, Hbase, Neo4j and CouchDb</li>
            </ul>
          </Accordion.Body>
        </Accordion.Item>

        <Accordion.Item eventKey="3">
          <Accordion.Header>
            What is the purposes of jwt and how does it work?{" "}
          </Accordion.Header>
          <Accordion.Body>
            <strong>Purposes of JWT:</strong> 
            JSON Web Tokens (JWT) are tokens generated by the server upon user authentication on a web application, and then sent to the client.<br/>These tokens are then sent on every HTTP request, which allows the server to authenticate the user. <br/> To ensure integrity, information contained in the token is signed by a private key, owned by the server. When the server gets the token back from the client, it just has to compare the signature sent by the client with the one it will generate with its private key. If the signatures are identical, the token is then valid.<br/>

            <strong>How does it works?</strong><br/>
            A “Header” section, containing the algorithm used for the signature, as well as the type of token (“JWT” in our case). The whole thing is encoded in Base64.<br/> A “Payload” section, containing the token data, like the user name, date of token generation or expiry date. All of that is written in JSON and also encoded in Base64<br/>A “Signature” section, that is the result of Header and Payload, concatenated and then encrypted with the private key.
          </Accordion.Body>
        </Accordion.Item>
      </Accordion>
    </div>
  );
};

export default Blogs;
